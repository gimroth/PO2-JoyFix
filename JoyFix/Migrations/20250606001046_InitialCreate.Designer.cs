// <auto-generated />
using System;
using JoyFix.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JoyFix.Migrations
{
    [DbContext(typeof(ContextDB))]
    [Migration("20250606001046_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JoyFix.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JoyFix.Data.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("JoyFix.Data.Repair", b =>
                {
                    b.Property<int>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("PartsUsed")
                        .HasColumnType("text");

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RepairRequestId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("JoyFix.Data.RepairRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Status");

                    b.ToTable("RepairRequests");
                });

            modelBuilder.Entity("JoyFix.Data.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("JoyFix.Data.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("JoyFix.Data.TechnicianSpecialization", b =>
                {
                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TechnicianId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("TechnicianSpecializations");
                });

            modelBuilder.Entity("JoyFix.Data.Device", b =>
                {
                    b.HasOne("JoyFix.Data.Customer", "Customer")
                        .WithMany("Devices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("JoyFix.Data.Repair", b =>
                {
                    b.HasOne("JoyFix.Data.RepairRequest", "RepairRequest")
                        .WithOne("Repair")
                        .HasForeignKey("JoyFix.Data.Repair", "RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoyFix.Data.Technician", "Technician")
                        .WithMany("Repairs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RepairRequest");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("JoyFix.Data.RepairRequest", b =>
                {
                    b.HasOne("JoyFix.Data.Customer", "Customer")
                        .WithMany("RepairRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoyFix.Data.Device", "Device")
                        .WithMany("RepairRequests")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("JoyFix.Data.TechnicianSpecialization", b =>
                {
                    b.HasOne("JoyFix.Data.Specialization", "Specialization")
                        .WithMany("Technicians")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoyFix.Data.Technician", "Technician")
                        .WithMany("Specializations")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("JoyFix.Data.Customer", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("JoyFix.Data.Device", b =>
                {
                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("JoyFix.Data.RepairRequest", b =>
                {
                    b.Navigation("Repair");
                });

            modelBuilder.Entity("JoyFix.Data.Specialization", b =>
                {
                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("JoyFix.Data.Technician", b =>
                {
                    b.Navigation("Repairs");

                    b.Navigation("Specializations");
                });
#pragma warning restore 612, 618
        }
    }
}
