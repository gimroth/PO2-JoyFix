@page "/technicians"
@inject JoyFix.Services.TechnicianService TechnicianService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Technicians</h3>

<button class="btn btn-primary mb-3" @onclick="CreateNew">Add New Technician</button>

<div class="card p-3 mb-4">
    <div class="row g-2">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search by name..." @bind="filterName" />
        </div>
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search by email..." @bind="filterEmail" />
        </div>
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search by specialization..." @bind="filterSpecialization" />
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters">Search</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
    </div>
</div>

@if (filteredTechnicians == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredTechnicians.Any())
{
    <p>No technicians matching the criteria.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Specializations</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in filteredTechnicians)
            {
                <tr>
                    <td>@t.Name</td>
                    <td>@t.Email</td>
                    <td>@t.PhoneNumber</td>
                    <td>@string.Join(", ", t.Specializations.Select(s => s.Specialization.Name))</td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => EditTechnician(t.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(t.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (confirmDeleteId != null)
{
    <div class="alert alert-warning mt-3">
        <p>Are you sure you want to delete this technician?</p>
        <button class="btn btn-danger me-2" @onclick="DeleteTechnicianConfirmed">Yes, delete</button>
        <button class="btn btn-secondary" @onclick="() => confirmDeleteId = null">Cancel</button>
    </div>
}

@code {
    private List<JoyFix.Data.Technician>? technicians;
    private List<JoyFix.Data.Technician>? filteredTechnicians;

    private int? confirmDeleteId = null;

    private string? filterName;
    private string? filterEmail;
    private string? filterSpecialization;

    protected override void OnInitialized()
    {
        LoadTechnicians();
    }

    private void LoadTechnicians()
    {
        technicians = TechnicianService.GetAllTechnicians();
        filteredTechnicians = new List<JoyFix.Data.Technician>(technicians);
    }

    private void ApplyFilters()
    {
        if (technicians == null)
            return;

        filteredTechnicians = technicians
            .Where(t =>
                (string.IsNullOrWhiteSpace(filterName) || t.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterEmail) || t.Email.Contains(filterEmail, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterSpecialization) || t.Specializations.Any(s =>
                    s.Specialization.Name.Contains(filterSpecialization, StringComparison.OrdinalIgnoreCase)))
            )
            .ToList();
    }

    private void ClearFilters()
    {
        filterName = null;
        filterEmail = null;
        filterSpecialization = null;

        if (technicians != null)
        {
            filteredTechnicians = new List<JoyFix.Data.Technician>(technicians);
        }
    }

    private void EditTechnician(int id) => Navigation.NavigateTo($"/technicianedit/{id}");
    private void CreateNew() => Navigation.NavigateTo("/technicianadd");
    private void ConfirmDelete(int id) => confirmDeleteId = id;

    private void DeleteTechnicianConfirmed()
    {
        if (confirmDeleteId != null)
        {
            try
            {
                TechnicianService.DeleteTechnician(confirmDeleteId.Value);
                confirmDeleteId = null;
                LoadTechnicians();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while deleting: {ex.Message}");
            }
        }
    }
}