@page "/repairrequests"
@inject JoyFix.Services.RepairRequestService RepairRequestService
@inject JoyFix.Services.CustomerService CustomerService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Repair Requests</h3>

<button class="btn btn-primary mb-3" @onclick="CreateNew">Add new request</button>

<div class="card p-3 mb-4">
    <div class="row g-2">
        <div class="col-md-3">
            <input type="text" class="form-control" placeholder="Device type" @bind="filterDeviceType" />
        </div>
        <div class="col-md-2">
            <select class="form-select" @bind="filterStatus">
                <option value="">-- Status --</option>
                <option value="oczekuje">Pending</option>
                <option value="w realizacji">In Progress</option>
                <option value="zakończone">Completed</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filterCustomerId">
                <option value="">-- Customer --</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.Id">@customer.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="filterStartDate" />
        </div>
        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="filterEndDate" />
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters">
            <i class="bi bi-search"></i> Search
        </button>
        <button class="btn btn-secondary" @onclick="ClearFilters">
            <i class="bi bi-x-circle"></i> Clear
        </button>
    </div>
</div>

@if (filteredRequests == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredRequests.Any())
{
    <p>No requests meet the selected criteria.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Customer</th>
                <th>Device</th>
                <th>Type</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in filteredRequests)
            {
                <tr>
                    <td>@r.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>@r.Customer?.Name</td>
                    <td>@r.Device?.Model</td>
                    <td>@r.DeviceType</td>
                    <td>@r.Status</td>
                    <td>
                        <a class="btn btn-sm btn-secondary me-1" href="@($"/repairrequestsedit/{r.Id}")">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(r.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (confirmDeleteId != null)
{
    <div class="alert alert-warning mt-3">
        <p>Are you sure you want to delete this request?</p>
        <button class="btn btn-danger me-2" @onclick="DeleteConfirmed">Yes, delete</button>
        <button class="btn btn-secondary" @onclick="() => confirmDeleteId = null">Cancel</button>
    </div>
}

@code {
    private List<JoyFix.Data.RepairRequest> repairRequests = new();
    private List<JoyFix.Data.RepairRequest> filteredRequests = new();
    private List<JoyFix.Data.Customer> customers = new();

    private string filterDeviceType = "";
    private string filterStatus = "";
    private int? filterCustomerId = null;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;

    private int? confirmDeleteId = null;

    protected override void OnInitialized()
    {
        repairRequests = RepairRequestService.GetAllRequests();
        customers = CustomerService.GetAllCustomers();
        filteredRequests = new List<JoyFix.Data.RepairRequest>(repairRequests);
    }

    private void ApplyFilters()
    {
        filteredRequests = repairRequests
            .Where(r =>
                (string.IsNullOrWhiteSpace(filterDeviceType) || r.DeviceType.Contains(filterDeviceType, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterStatus) || r.Status == filterStatus) &&
                (!filterCustomerId.HasValue || r.CustomerId == filterCustomerId) &&
                (!filterStartDate.HasValue || r.CreatedAt >= filterStartDate.Value) &&
                (!filterEndDate.HasValue || r.CreatedAt <= filterEndDate.Value)
            )
            .ToList();
    }

    private void ClearFilters()
    {
        filterDeviceType = "";
        filterStatus = "";
        filterCustomerId = null;
        filterStartDate = null;
        filterEndDate = null;

        filteredRequests = new List<JoyFix.Data.RepairRequest>(repairRequests);
    }

    private void CreateNew() => Navigation.NavigateTo("/repairrequestadd");
    private void EditRepair(int id) => Navigation.NavigateTo($"/repairrequestedit/{id}");
    private void ConfirmDelete(int id) => confirmDeleteId = id;

    private void DeleteConfirmed()
    {
        if (confirmDeleteId != null)
        {
            try
            {
                RepairRequestService.DeleteRequest(confirmDeleteId.Value);
                repairRequests = RepairRequestService.GetAllRequests();
                filteredRequests = new List<JoyFix.Data.RepairRequest>(repairRequests);
                confirmDeleteId = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Delete error: " + ex.Message);
            }
        }
    }
}