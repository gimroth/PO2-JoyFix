@page "/repairs"
@inject JoyFix.Services.RepairService RepairService
@inject JoyFix.Services.TechnicianService TechnicianService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Repairs</h3>

<button class="btn btn-primary mb-3" @onclick="CreateNew">Add new repair</button>

<div class="card p-3 mb-4">
    <div class="row g-2">
        <div class="col-md-3">
            <select class="form-select" @bind="filterTechnicianId">
                <option value="">-- Technician --</option>
                @foreach (var t in technicians)
                {
                    <option value="@t.Id">@t.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="filterStartDate" />
        </div>
        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="filterEndDate" />
        </div>
        <div class="col-md-2">
            <InputNumber class="form-control" @bind-Value="filterMinCost" placeholder="Min cost" />
        </div>
        <div class="col-md-2">
            <InputNumber class="form-control" @bind-Value="filterMaxCost" placeholder="Max cost" />
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters">Search</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
    </div>
</div>

@if (filteredRepairs == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredRepairs.Any())
{
    <p>No repairs matching the criteria.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Technician</th>
                <th>Work description</th>
                <th>Parts used</th>
                <th>Cost</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in filteredRepairs)
            {
                <tr>
                    <td>@r.Technician?.Name</td>
                    <td>@r.WorkDescription</td>
                    <td>@r.PartsUsed</td>
                    <td>@r.Cost zł</td>
                    <td>@r.RepairDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a class="btn btn-sm btn-secondary me-1" href="@($"/repairs/edit/{r.RepairRequestId}")">Edit</a>
                        <a class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(r.RepairRequestId)">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (confirmDeleteId != null)
{
    <div class="alert alert-warning mt-3">
        <p>Are you sure you want to delete this repair?</p>
        <button class="btn btn-danger me-2" @onclick="DeleteConfirmed">Yes, delete</button>
        <button class="btn btn-secondary" @onclick="() => confirmDeleteId = null">Cancel</button>
    </div>
}

@code {
    private List<JoyFix.Data.Repair> repairs = new();
    private List<JoyFix.Data.Repair> filteredRepairs = new();
    private List<JoyFix.Data.Technician> technicians = new();

    private int? confirmDeleteId = null;

    private int? filterTechnicianId = null;
    private DateTime? filterStartDate = null;
    private DateTime? filterEndDate = null;
    private decimal? filterMinCost = null;
    private decimal? filterMaxCost = null;

    protected override void OnInitialized()
    {
        repairs = RepairService.GetAllRepairs();
        technicians = TechnicianService.GetAllTechnicians();
        filteredRepairs = new List<Repair>(repairs);
    }

    private void ApplyFilters()
    {
        filteredRepairs = repairs
            .Where(r =>
                (!filterTechnicianId.HasValue || r.TechnicianId == filterTechnicianId.Value) &&
                (!filterStartDate.HasValue || r.RepairDate >= filterStartDate.Value) &&
                (!filterEndDate.HasValue || r.RepairDate <= filterEndDate.Value) &&
                (!filterMinCost.HasValue || r.Cost >= filterMinCost.Value) &&
                (!filterMaxCost.HasValue || r.Cost <= filterMaxCost.Value)
            )
            .ToList();
    }

    private void ClearFilters()
    {
        filterTechnicianId = null;
        filterStartDate = null;
        filterEndDate = null;
        filterMinCost = null;
        filterMaxCost = null;

        filteredRepairs = new List<Repair>(repairs);
    }

    private void CreateNew() => Navigation.NavigateTo("/repairadd");
    private void EditRepair(int id) => Navigation.NavigateTo($"/repairedit/{id}");
    private void ConfirmDelete(int id) => confirmDeleteId = id;

    private void DeleteConfirmed()
    {
        if (confirmDeleteId != null)
        {
            try
            {
                RepairService.DeleteRepair(confirmDeleteId.Value);
                repairs = RepairService.GetAllRepairs();
                filteredRepairs = new List<Repair>(repairs);
                confirmDeleteId = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Delete error: " + ex.Message);
            }
        }
    }
}