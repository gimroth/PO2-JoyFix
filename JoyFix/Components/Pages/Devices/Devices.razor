@page "/devices"
@inject JoyFix.Services.DeviceService DeviceService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Devices</h3>

<button class="btn btn-primary mb-3" @onclick="CreateNew">Add new Device</button>

<div class="card p-3 mb-4">
    <div class="row g-2">
        <div class="col-md-3">
            <input class="form-control" placeholder="Device Type" @bind="filterDeviceType" />
        </div>
        <div class="col-md-3">
            <input class="form-control" placeholder="Model" @bind="filterModel" />
        </div>
        <div class="col-md-3">
            <input class="form-control" placeholder="Serial Number" @bind="filterSerialNumber" />
        </div>
        <div class="col-md-3">
            <input class="form-control" placeholder="Customer Name" @bind="filterCustomerName" />
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters">Search</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear All</button>
    </div>
</div>

@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredDevices.Any())
{
    <p>No devices meet the selected criteria.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Type</th>
                <th>Model</th>
                <th>Serial Numbwe</th>
                <th>Customer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in filteredDevices)
            {
                <tr>
                    <td>@d.DeviceType</td>
                    <td>@d.Model</td>
                    <td>@d.SerialNumber</td>
                    <td>@d.Customer?.Name</td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-1" @onclick="() => EditDevice(d.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(d.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (confirmDeleteId != null)
{
    <div class="alert alert-warning mt-3">
        <p>Are you sure you want to delete this device?</p>
        <button class="btn btn-danger me-2" @onclick="DeleteDeviceConfirmed">Yes, delete</button>
        <button class="btn btn-secondary" @onclick="() => confirmDeleteId = null">Cancel</button>
    </div>
}

@code {
    private List<JoyFix.Data.Device>? devices;
    private List<JoyFix.Data.Device> filteredDevices = new();

    private int? confirmDeleteId = null;

    private string? filterDeviceType;
    private string? filterModel;
    private string? filterSerialNumber;
    private string? filterCustomerName;

    protected override void OnInitialized()
    {
        LoadDevices();
    }

    private void LoadDevices()
    {
        devices = DeviceService.GetAllDevices();
        filteredDevices = new List<JoyFix.Data.Device>(devices);
    }

    private void ApplyFilters()
    {
        if (devices == null) return;

        filteredDevices = devices
            .Where(d =>
                (string.IsNullOrWhiteSpace(filterDeviceType) || d.DeviceType.Contains(filterDeviceType, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterModel) || d.Model.Contains(filterModel, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterSerialNumber) || d.SerialNumber.Contains(filterSerialNumber, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterCustomerName) || (d.Customer?.Name ?? "").Contains(filterCustomerName, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
    }

    private void ClearFilters()
    {
        filterDeviceType = null;
        filterModel = null;
        filterSerialNumber = null;
        filterCustomerName = null;

        if (devices != null)
            filteredDevices = new List<JoyFix.Data.Device>(devices);
    }

    private void EditDevice(int id)
    {
        Navigation.NavigateTo($"/deviceedit/{id}");
    }

    private void CreateNew()
    {
        Navigation.NavigateTo("/deviceadd");
    }

    private void ConfirmDelete(int id)
    {
        confirmDeleteId = id;
    }

    private void DeleteDeviceConfirmed()
    {
        if (confirmDeleteId != null)
        {
            try
            {
                DeviceService.DeleteDevice(confirmDeleteId.Value);
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine(ex.Message);
            }

            confirmDeleteId = null;
            LoadDevices();
        }
    }
}
